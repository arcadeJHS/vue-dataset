{"version":3,"file":"Dataset.js","sources":["../../src/i18n/en.js","../../src/helpers/index.js","../../src/Dataset.vue?vue&type=template&lang.js","../../src/Dataset.vue"],"sourcesContent":["export default {\n  show: 'Show',\n  entries: 'entries',\n  previous: 'Previous',\n  next: 'Next',\n  showing: 'Showing',\n  showingTo: 'to',\n  showingOf: 'of',\n  showingEntries: 'entries'\n}\n","const MORE_PAGES = '...'\n\nfunction debounce(func, wait, immediate) {\n  let timeout\n\n  return function () {\n    const context = this\n    const args = arguments\n\n    clearTimeout(timeout)\n    if (immediate && !timeout) {\n      func.apply(context, args)\n    }\n    timeout = setTimeout(function () {\n      timeout = null\n      if (!immediate) {\n        func.apply(context, args)\n      }\n    }, wait)\n  }\n}\n\n// https://jsperf.com/object-empty-ch/1\nfunction isEmptyObject(obj) {\n  // eslint-disable-next-line no-unreachable-loop\n  for (const key in obj) {\n    return false\n  }\n\n  return true\n}\n\nfunction createPagingRange(nrOfPages, currentPage) {\n  const delta = 2\n  const range = []\n  const rangeWithDots = []\n  let length\n\n  range.push(1)\n\n  if (nrOfPages <= 1) {\n    return range\n  }\n\n  for (let i = currentPage - delta; i <= currentPage + delta; i++) {\n    if (i < nrOfPages && i > 1) {\n      range.push(i)\n    }\n  }\n  range.push(nrOfPages)\n\n  for (let i = 0; i < range.length; i++) {\n    if (length) {\n      if (range[i] - length === 2) {\n        rangeWithDots.push(length + 1)\n      } else if (range[i] - length !== 1) {\n        rangeWithDots.push(MORE_PAGES)\n      }\n    }\n    rangeWithDots.push(range[i])\n    length = range[i]\n  }\n\n  return rangeWithDots\n}\n\nfunction fieldSorter(fields, dsSortAs = {}) {\n  const dir = []\n  let i\n  const length = fields.length\n\n  fields = fields.map(function (o, i) {\n    if (o[0] === '-') {\n      dir[i] = -1\n      o = o.substring(1)\n    } else {\n      dir[i] = 1\n    }\n\n    return o\n  })\n\n  return function (a, b) {\n    for (i = 0; i < length; i++) {\n      const o = fields[i]\n      const aVal = dsSortAs[o] ? dsSortAs[o](a.value[o]) : a.value[o]\n      const bVal = dsSortAs[o] ? dsSortAs[o](b.value[o]) : b.value[o]\n\n      if (aVal > bVal) {\n        return dir[i]\n      }\n      if (aVal < bVal) {\n        return -dir[i]\n      }\n    }\n\n    return 0\n  }\n}\n\nfunction fieldFilter(items, filterFields) {\n  // Filter it by field\n  for (const filterKey in filterFields) {\n    // console.log(filterKey + ' -> ' + filterFields[filterKey]);\n    items = items.filter(function (item) {\n      const itemValue = item.value\n\n      for (const itemKey in itemValue) {\n        if (itemKey === filterKey) {\n          if (typeof filterFields[filterKey] === 'function') {\n            return filterFields[filterKey](itemValue[itemKey])\n          }\n          if (filterFields[filterKey] === '') {\n            return true\n          }\n          if (itemValue[itemKey] === filterFields[filterKey]) {\n            return true\n          }\n        }\n      }\n\n      return false\n    })\n  }\n\n  return items\n}\n\n// Search method that also takes into account transformations needed\nfunction findAny(dsSearchIn, dsSearchAs, rowData, str) {\n  // Convert the search string to lower case\n  str = String(str).toLowerCase()\n  for (const key in rowData) {\n    if (dsSearchIn.length === 0 || dsSearchIn.indexOf(key) !== -1) {\n      const value = String(rowData[key]).toLowerCase()\n\n      for (const field in dsSearchAs) {\n        if (field === key) {\n          // Found key in dsSearchAs so we pass the value and the search string to a search function\n          // that returns true/false and we return that if true.\n          /* Check if dsSearchAs is a function (passed from the template) */\n          if (typeof dsSearchAs[field] === 'function') {\n            const res = dsSearchAs[field](value, str, rowData)\n\n            if (res === true) {\n              return res\n            }\n          }\n        }\n      }\n      // If it doesn't return from above we perform a simple search\n      if (value.indexOf(str) >= 0) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n\nexport { MORE_PAGES, debounce, isEmptyObject, createPagingRange, fieldSorter, fieldFilter, findAny }\n","\n<div>\n  <slot\n    :ds=\"{\n      dsIndexes: indexes,\n      dsShowEntries,\n      dsResultsNumber,\n      dsPage,\n      dsPagecount,\n      dsFrom,\n      dsTo,\n      dsData,\n      dsRows,\n      dsPages,\n      search,\n      showEntries,\n      setActive\n    }\"\n  ></slot>\n</div>\n","<template>\n  <div>\n    <slot\n      :ds=\"{\n        dsIndexes: indexes,\n        dsShowEntries,\n        dsResultsNumber,\n        dsPage,\n        dsPagecount,\n        dsFrom,\n        dsTo,\n        dsData,\n        dsRows,\n        dsPages,\n        search,\n        showEntries,\n        setActive\n      }\"\n    ></slot>\n  </div>\n</template>\n\n<script>\nimport datasetI18n from './i18n/en.js'\nimport { createPagingRange, fieldFilter, fieldSorter, findAny, isEmptyObject } from './helpers'\n\nexport default {\n  provide() {\n    return {\n      search: this.search,\n      showEntries: this.showEntries,\n      setActive: this.setActive,\n      datasetI18n: this.datasetI18n,\n      /* Setup reactive provides */\n      rdsIndexes: () => this.indexes,\n      rdsData: () => this.dsData,\n      rdsRows: () => this.dsRows,\n      rdsPages: () => this.dsPages,\n      rdsResultsNumber: () => this.dsResultsNumber,\n      rdsPagecount: () => this.dsPagecount,\n      rdsFrom: () => this.dsFrom,\n      rdsTo: () => this.dsTo,\n      rdsPage: () => this.dsPage\n    }\n  },\n  props: {\n    dsData: {\n      type: Array,\n      default: () => []\n    },\n    dsFilterFields: {\n      type: Object,\n      default: () => ({})\n    },\n    dsSortby: {\n      type: Array,\n      default: () => []\n    },\n    dsSearchIn: {\n      type: Array,\n      default: () => []\n    },\n    dsSearchAs: {\n      type: Object,\n      default: () => ({})\n    },\n    dsSortAs: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data: function () {\n    return {\n      dsPage: 1,\n      dsSearch: '',\n      dsShowEntries: 10,\n      datasetI18n,\n      indexes: []\n    }\n  },\n  computed: {\n    whenChanged() {\n      /* eslint-disable no-unused-expressions */\n      this.dsData\n      this.dsSearch\n      this.dsSortby\n      this.dsFilterFields\n      this.dsSearchIn\n      this.dsSearchAs\n      this.dsSortAs\n\n      return Date.now()\n    },\n    dsRows() {\n      // We should not modify another computed property from inside a computed property\n      // This should be moved into the dsTo computed if needed\n      /*\n      if (this.dsTo <= 0) {\n        this.dsTo = this.indexes.length;\n      }\n      */\n      return this.indexes.slice(this.dsFrom, this.dsTo)\n    },\n    dsPages() {\n      return createPagingRange(this.dsPagecount, this.dsPage)\n    },\n    dsResultsNumber() {\n      return this.indexes.length\n    },\n    dsPagecount() {\n      return Math.ceil(this.dsResultsNumber / this.dsShowEntries)\n    },\n    dsFrom() {\n      return (this.dsPage - 1) * this.dsShowEntries\n    },\n    dsTo() {\n      return this.dsPage * this.dsShowEntries\n    }\n  },\n  watch: {\n    dsResultsNumber: {\n      handler(val, oldVal) {\n        // Reset active page when results change\n        this.setActive(1)\n      }\n    },\n    /*\n    The naive attempt would be to manipulate the original array directly.\n    This is problematic because it has to be filtered first, then sorted, then the from/to rows extracted.\n    In order to do that in that order, we would need to work on a copy.\n    But this is problematic as well since we'd loose the data-binding to the original array.\n\n    The trick is to work directly on the array indexes.\n    */\n    whenChanged: {\n      handler(newVal, oldVal) {\n        let result = []\n        const dsData = this.dsData\n        const dsSearch = this.dsSearch\n        const dsSortby = this.dsSortby\n        const dsFilterFields = this.dsFilterFields\n        const dsSearchIn = this.dsSearchIn\n        const dsSearchAs = this.dsSearchAs\n        const dsSortAs = this.dsSortAs\n\n        if (!dsSearch && !dsSortby.length && isEmptyObject(dsFilterFields)) {\n          // Skip processing and just get the indexes\n          result = dsData.map((val, i) => i)\n        } else {\n          // Index it\n          result = dsData.map((val, i) => ({ index: i, value: val }))\n\n          // Filter it by field\n          if (!isEmptyObject(dsFilterFields)) {\n            result = fieldFilter(result, dsFilterFields)\n          }\n\n          // Search it\n          if (dsSearch) {\n            result = result.filter((entry) => findAny(dsSearchIn, dsSearchAs, entry.value, dsSearch))\n          }\n\n          // Sort it\n          if (dsSortby.length) {\n            result.sort(fieldSorter(dsSortby, dsSortAs))\n          }\n\n          // We need only the indexes\n          result = result.map((entry) => entry.index)\n        }\n        this.indexes = result\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    search(value) {\n      this.dsSearch = value\n    },\n    showEntries(value) {\n      const pagesBeforeChange = this.dsPages\n\n      this.dsShowEntries = value\n      this.$nextTick(() => {\n        const pagesAfterChange = this.dsPages\n\n        if (pagesAfterChange.length < pagesBeforeChange.length) {\n          this.setActive(pagesAfterChange[pagesAfterChange.length - 1])\n        }\n      })\n    },\n    setActive(value) {\n      this.dsPage = value\n    }\n  }\n}\n</script>\n"],"names":["const","let","i","this"],"mappings":"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"}