{"version":3,"file":"Dataset.min.js","sources":["../../src/i18n/en.js","../../src/helpers/index.js","../../src/Dataset.vue?vue&type=template&lang.js","../../src/Dataset.vue"],"sourcesContent":["export default {\n  show: 'Show',\n  entries: 'entries',\n  previous: 'Previous',\n  next: 'Next',\n  showing: 'Showing',\n  showingTo: 'to',\n  showingOf: 'of',\n  showingEntries: 'entries'\n}\n","const MORE_PAGES = '...'\n\nfunction debounce(func, wait, immediate) {\n  let timeout\n\n  return function () {\n    const context = this\n    const args = arguments\n\n    clearTimeout(timeout)\n    if (immediate && !timeout) {\n      func.apply(context, args)\n    }\n    timeout = setTimeout(function () {\n      timeout = null\n      if (!immediate) {\n        func.apply(context, args)\n      }\n    }, wait)\n  }\n}\n\n// https://jsperf.com/object-empty-ch/1\nfunction isEmptyObject(obj) {\n  // eslint-disable-next-line no-unreachable-loop\n  for (const key in obj) {\n    return false\n  }\n\n  return true\n}\n\nfunction createPagingRange(nrOfPages, currentPage) {\n  const delta = 2\n  const range = []\n  const rangeWithDots = []\n  let length\n\n  range.push(1)\n\n  if (nrOfPages <= 1) {\n    return range\n  }\n\n  for (let i = currentPage - delta; i <= currentPage + delta; i++) {\n    if (i < nrOfPages && i > 1) {\n      range.push(i)\n    }\n  }\n  range.push(nrOfPages)\n\n  for (let i = 0; i < range.length; i++) {\n    if (length) {\n      if (range[i] - length === 2) {\n        rangeWithDots.push(length + 1)\n      } else if (range[i] - length !== 1) {\n        rangeWithDots.push(MORE_PAGES)\n      }\n    }\n    rangeWithDots.push(range[i])\n    length = range[i]\n  }\n\n  return rangeWithDots\n}\n\nfunction fieldSorter(fields, dsSortAs = {}) {\n  const dir = []\n  let i\n  const length = fields.length\n\n  fields = fields.map(function (o, i) {\n    if (o[0] === '-') {\n      dir[i] = -1\n      o = o.substring(1)\n    } else {\n      dir[i] = 1\n    }\n\n    return o\n  })\n\n  return function (a, b) {\n    for (i = 0; i < length; i++) {\n      const o = fields[i]\n      const aVal = dsSortAs[o] ? dsSortAs[o](a.value[o]) : a.value[o]\n      const bVal = dsSortAs[o] ? dsSortAs[o](b.value[o]) : b.value[o]\n\n      if (aVal > bVal) {\n        return dir[i]\n      }\n      if (aVal < bVal) {\n        return -dir[i]\n      }\n    }\n\n    return 0\n  }\n}\n\nfunction fieldFilter(items, filterFields) {\n  // Filter it by field\n  for (const filterKey in filterFields) {\n    // console.log(filterKey + ' -> ' + filterFields[filterKey]);\n    items = items.filter(function (item) {\n      const itemValue = item.value\n\n      for (const itemKey in itemValue) {\n        if (itemKey === filterKey) {\n          if (typeof filterFields[filterKey] === 'function') {\n            return filterFields[filterKey](itemValue[itemKey])\n          }\n          if (filterFields[filterKey] === '') {\n            return true\n          }\n          if (itemValue[itemKey] === filterFields[filterKey]) {\n            return true\n          }\n        }\n      }\n\n      return false\n    })\n  }\n\n  return items\n}\n\n// Search method that also takes into account transformations needed\nfunction findAny(dsSearchIn, dsSearchAs, rowData, str) {\n  // Convert the search string to lower case\n  str = String(str).toLowerCase()\n  for (const key in rowData) {\n    if (dsSearchIn.length === 0 || dsSearchIn.indexOf(key) !== -1) {\n      const value = String(rowData[key]).toLowerCase()\n\n      for (const field in dsSearchAs) {\n        if (field === key) {\n          // Found key in dsSearchAs so we pass the value and the search string to a search function\n          // that returns true/false and we return that if true.\n          /* Check if dsSearchAs is a function (passed from the template) */\n          if (typeof dsSearchAs[field] === 'function') {\n            const res = dsSearchAs[field](value, str, rowData)\n\n            if (res === true) {\n              return res\n            }\n          }\n        }\n      }\n      // If it doesn't return from above we perform a simple search\n      if (value.indexOf(str) >= 0) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n\nexport { MORE_PAGES, debounce, isEmptyObject, createPagingRange, fieldSorter, fieldFilter, findAny }\n","\n<div>\n  <slot\n    :ds=\"{\n      dsIndexes: indexes,\n      dsShowEntries,\n      dsResultsNumber,\n      dsPage,\n      dsPagecount,\n      dsFrom,\n      dsTo,\n      dsData,\n      dsRows,\n      dsPages,\n      search,\n      showEntries,\n      setActive\n    }\"\n  ></slot>\n</div>\n","<template>\n  <div>\n    <slot\n      :ds=\"{\n        dsIndexes: indexes,\n        dsShowEntries,\n        dsResultsNumber,\n        dsPage,\n        dsPagecount,\n        dsFrom,\n        dsTo,\n        dsData,\n        dsRows,\n        dsPages,\n        search,\n        showEntries,\n        setActive\n      }\"\n    ></slot>\n  </div>\n</template>\n\n<script>\nimport datasetI18n from './i18n/en.js'\nimport { createPagingRange, fieldFilter, fieldSorter, findAny, isEmptyObject } from './helpers'\n\nexport default {\n  provide() {\n    return {\n      search: this.search,\n      showEntries: this.showEntries,\n      setActive: this.setActive,\n      datasetI18n: this.datasetI18n,\n      /* Setup reactive provides */\n      rdsIndexes: () => this.indexes,\n      rdsData: () => this.dsData,\n      rdsRows: () => this.dsRows,\n      rdsPages: () => this.dsPages,\n      rdsResultsNumber: () => this.dsResultsNumber,\n      rdsPagecount: () => this.dsPagecount,\n      rdsFrom: () => this.dsFrom,\n      rdsTo: () => this.dsTo,\n      rdsPage: () => this.dsPage\n    }\n  },\n  props: {\n    dsData: {\n      type: Array,\n      default: () => []\n    },\n    dsFilterFields: {\n      type: Object,\n      default: () => ({})\n    },\n    dsSortby: {\n      type: Array,\n      default: () => []\n    },\n    dsSearchIn: {\n      type: Array,\n      default: () => []\n    },\n    dsSearchAs: {\n      type: Object,\n      default: () => ({})\n    },\n    dsSortAs: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data: function () {\n    return {\n      dsPage: 1,\n      dsSearch: '',\n      dsShowEntries: 10,\n      datasetI18n,\n      indexes: []\n    }\n  },\n  computed: {\n    whenChanged() {\n      /* eslint-disable no-unused-expressions */\n      this.dsData\n      this.dsSearch\n      this.dsSortby\n      this.dsFilterFields\n      this.dsSearchIn\n      this.dsSearchAs\n      this.dsSortAs\n\n      return Date.now()\n    },\n    dsRows() {\n      // We should not modify another computed property from inside a computed property\n      // This should be moved into the dsTo computed if needed\n      /*\n      if (this.dsTo <= 0) {\n        this.dsTo = this.indexes.length;\n      }\n      */\n      return this.indexes.slice(this.dsFrom, this.dsTo)\n    },\n    dsPages() {\n      return createPagingRange(this.dsPagecount, this.dsPage)\n    },\n    dsResultsNumber() {\n      return this.indexes.length\n    },\n    dsPagecount() {\n      return Math.ceil(this.dsResultsNumber / this.dsShowEntries)\n    },\n    dsFrom() {\n      return (this.dsPage - 1) * this.dsShowEntries\n    },\n    dsTo() {\n      return this.dsPage * this.dsShowEntries\n    }\n  },\n  watch: {\n    dsResultsNumber: {\n      handler(val, oldVal) {\n        // Reset active page when results change\n        this.setActive(1)\n      }\n    },\n    /*\n    The naive attempt would be to manipulate the original array directly.\n    This is problematic because it has to be filtered first, then sorted, then the from/to rows extracted.\n    In order to do that in that order, we would need to work on a copy.\n    But this is problematic as well since we'd loose the data-binding to the original array.\n\n    The trick is to work directly on the array indexes.\n    */\n    whenChanged: {\n      handler(newVal, oldVal) {\n        let result = []\n        const dsData = this.dsData\n        const dsSearch = this.dsSearch\n        const dsSortby = this.dsSortby\n        const dsFilterFields = this.dsFilterFields\n        const dsSearchIn = this.dsSearchIn\n        const dsSearchAs = this.dsSearchAs\n        const dsSortAs = this.dsSortAs\n\n        if (!dsSearch && !dsSortby.length && isEmptyObject(dsFilterFields)) {\n          // Skip processing and just get the indexes\n          result = dsData.map((val, i) => i)\n        } else {\n          // Index it\n          result = dsData.map((val, i) => ({ index: i, value: val }))\n\n          // Filter it by field\n          if (!isEmptyObject(dsFilterFields)) {\n            result = fieldFilter(result, dsFilterFields)\n          }\n\n          // Search it\n          if (dsSearch) {\n            result = result.filter((entry) => findAny(dsSearchIn, dsSearchAs, entry.value, dsSearch))\n          }\n\n          // Sort it\n          if (dsSortby.length) {\n            result.sort(fieldSorter(dsSortby, dsSortAs))\n          }\n\n          // We need only the indexes\n          result = result.map((entry) => entry.index)\n        }\n        this.indexes = result\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    search(value) {\n      this.dsSearch = value\n    },\n    showEntries(value) {\n      const pagesBeforeChange = this.dsPages\n\n      this.dsShowEntries = value\n      this.$nextTick(() => {\n        const pagesAfterChange = this.dsPages\n\n        if (pagesAfterChange.length < pagesBeforeChange.length) {\n          this.setActive(pagesAfterChange[pagesAfterChange.length - 1])\n        }\n      })\n    },\n    setActive(value) {\n      this.dsPage = value\n    }\n  }\n}\n</script>\n"],"names":["const","i","this","let"],"mappings":"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"}